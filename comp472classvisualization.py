# -*- coding: utf-8 -*-
"""COMP472ClassVisualization

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jr0aDCQ-ja04vrKGAb8-wx-aIWrkHjnA
"""

import numpy as np
import torch
import matplotlib.pyplot as plt
from torchvision.transforms import v2
from torchvision.datasets import ImageFolder

def image_grid(images):
    #Get the classes
    classes = images.classes

    #Select 25 random images from the data
    num_samples = len(images)
    indices = np.random.choice(num_samples, size=25, replace=False)
    selected_images = [images[i] for i in indices]

    #Create a figure and a set of subplots
    fig, axes = plt.subplots(nrows=5, ncols=5, figsize=(8.5, 11))

    #Flatten the axes array from 5x5 to 1x25 to loop through it
    axes = axes.flatten()

    #Loop through selection and plot each image without axes
    for i, (image, label_idx) in enumerate(selected_images):
        ax = axes[i]
        ax.imshow(image.squeeze(), cmap='gray')  # Plot image
        ax.axis('off')  # Turn off axis
        ax.set_title(classes[label_idx])  # Set class label as title

    plt.tight_layout()
    plt.show()

def pixel_intensity(image):
    #Flatten the image from 1x48x48 to a 1x2304
    flattened_image = image.flatten()
    #Plot histograms for each channel using matplot lib with the values rounded into 256 bins
    plt.figure(figsize=(8, 6))
    plt.hist(flattened_image, bins=256, color='blue', alpha=0.7,edgecolor = "black")

    plt.title('Pixel Intensity Histogram')
    plt.xlabel('Intensity')
    plt.ylabel('Count')

    return plt.gcf()

def image_hist_grids(images, classId):
    #Select 25 random images from the data
    num_samples = len(images)
    indices = np.random.choice(range(classId*500,(500+classId*500)), size=25, replace=False)
    selected_images = [images[i] for i in indices]
    print(indices)

    #Create figure and subplots for images and histograms
    fig, axes = plt.subplots(nrows=5, ncols=5, figsize=(8.5, 11))
    fig_hist, axes_hist = plt.subplots(nrows=5, ncols=5, figsize=(8.5, 11))

    #Flatten the axes arrays to loop through them
    axes = axes.flatten()
    axes_hist = axes_hist.flatten()

    #Loop through selection and plot each image and its histogram
    for i, (image, label_idx) in enumerate(selected_images):
        ax = axes[i]
        ax_hist = axes_hist[i]

        #Plot image
        ax.imshow(image.squeeze(), cmap='gray') #Plot the image in grayscale
        ax.axis('off')

        #Set class label as title
        ax.set_title(images.classes[label_idx]) #Title the image with the corresponding class

        #Flatten the image to a [1x2304] tensor and return the scale back to [0-255]
        flattened_image = image.flatten()*255
        #Plot histograms for each channel using matplot lib with the values rounded into 256 bins
        ax_hist.hist(flattened_image, bins=256, color='black', alpha=0.7, edgecolor='black') #Place the values into 256 bins then plot
        ax_hist.set_xlim([0, 255])  #Set x-axis limits to [0, 255]
        ax_hist.set_ylim([0, 100])  #Set y-axis limits as needed

    fig_hist.tight_layout()
    plt.show()

def plot_bar(dataset):
  #Get the unique classes and their counts from the targets
  labels, counts = torch.unique(torch.Tensor(dataset.targets),return_counts=True)

  #Plot the bar chart with the class names
  plt.bar(labels, counts, tick_label=dataset.classes)

  plt.xlabel('Class')
  plt.ylabel('Count')
  plt.title('Count of samples in each class')
  plt.show()

path = '/content/COMP472Data' #Change path to local directory
transform = v2.Compose([v2.ToImage(),v2.Grayscale(),v2.ToDtype(torch.float32, scale=True)])
dataset=ImageFolder(path,transform)
print(dataset.classes)
image_hist_grids(dataset)

image_hist_grids(dataset,3)